{"version":3,"file":"static/js/80.09fc8d23.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as Error,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  max-width: 200px;\n  gap: 10px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n  &:focus-visible {\n    box-shadow: 0 0 0 3px lightskyblue;\n  }\n`;\n\nexport const ErrorMessage = styled(Error)`\n  color: #f96722;\n  font-size: 14px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  padding: 4px 5px;\n  cursor: pointer;\n`;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const getFilter = state => state.filter;\n\nexport const getVisibleContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Formik } from 'formik';\nimport { Form, Field, Button, ErrorMessage } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nconst contactsFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required field'),\n  number: Yup.string()\n    .matches(\n      /^[0-9]{3}-[0-9]{2}-[0-9]{2}$/,\n      'Please, enter only digits in format of \"123-12-12\"'\n    )\n    .required('Required field'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactsFormSchema}\n      onSubmit={(values, actions) => {\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          return alert(`${values.name} is already in contacts!`);\n        }\n\n        dispatch(\n          addContact({\n            name: values.name,\n            number: values.number,\n          })\n        );\n\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <Field id=\"name\" name=\"name\" />\n        <ErrorMessage name=\"name\" component={'span'}></ErrorMessage>\n\n        <label htmlFor=\"number\">Number</label>\n        <Field id=\"number\" name=\"number\" type=\"tel\" />\n        <ErrorMessage name=\"number\" component={'span'}></ErrorMessage>\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      <p>\n        {name}: {number}\n      </p>\n      <button onClick={() => dispatch(deleteContact(id))}>Delete</button>\n    </li>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={evt => dispatch(updateFilter(evt.target.value))}\n      />\n    </>\n  );\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector } from 'react-redux';\nimport { getVisibleContacts } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const filteredContacts = useSelector(getVisibleContacts);\n  return (\n    <>\n      <Filter />\n      <ul>\n        {filteredContacts.map(item => (\n          <Contact\n            key={item.id}\n            id={item.id}\n            name={item.name}\n            number={item.number}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  });\n\n  return (\n    <div>\n      <ContactForm />\n      {contacts.length > 0 ? <ContactList /> : <p>There are no contacts</p>}\n    </div>\n  );\n}\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","Field","FormikField","_templateObject2","ErrorMessage","Error","_templateObject3","Button","_templateObject4","getContacts","state","contacts","items","getVisibleContacts","createSelector","filter","contact","name","toLowerCase","includes","contactsFormSchema","Yup","shape","min","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","some","alert","concat","addContact","resetForm","children","_jsxs","htmlFor","id","component","type","Contact","_ref","onClick","deleteContact","Filter","_Fragment","onChange","evt","updateFilter","target","value","ContactList","filteredContacts","map","item","Contacts","useEffect","fetchContacts","length"],"sourceRoot":""}