{"version":3,"file":"static/js/738.f4c99bb2.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Contact/Contact.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","pages/Contacts.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  Form as FormikForm,\n  Field as FormikField,\n  ErrorMessage as Error,\n} from 'formik';\n\nexport const Form = styled(FormikForm)`\n  max-width: 200px;\n  gap: 10px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Field = styled(FormikField)`\n  &:focus-visible {\n    box-shadow: 0 0 0 3px lightskyblue;\n  }\n`;\n\nexport const ErrorMessage = styled(Error)`\n  color: #f96722;\n  font-size: 14px;\n`;\n\nexport const Button = styled.button`\n  width: 100px;\n  padding: 4px 5px;\n  cursor: pointer;\n`;\n","import { Formik } from 'formik';\nimport { Form, Field, Button, ErrorMessage } from './ContactForm.styled';\nimport { nanoid } from 'nanoid';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/slice';\n\nconst contactsFormSchema = Yup.object().shape({\n  name: Yup.string()\n    .min(3, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required field'),\n  number: Yup.string()\n    .matches(\n      /^[0-9]{3}-[0-9]{2}-[0-9]{2}$/,\n      'Please, enter only digits in format of \"123-12-12\"'\n    )\n    .required('Required field'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts);\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={contactsFormSchema}\n      onSubmit={(values, actions) => {\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          return alert(`${values.name} is already in contacts!`);\n        }\n\n        dispatch(\n          addContact({\n            name: values.name,\n            number: values.number,\n            id: nanoid(),\n          })\n        );\n\n        actions.resetForm();\n      }}\n    >\n      <Form>\n        <label htmlFor=\"name\">Name</label>\n        <Field id=\"name\" name=\"name\" />\n        <ErrorMessage name=\"name\" component={'span'}></ErrorMessage>\n\n        <label htmlFor=\"number\">Number</label>\n        <Field id=\"number\" name=\"number\" type=\"tel\" />\n        <ErrorMessage name=\"number\" component={'span'}></ErrorMessage>\n\n        <Button type=\"submit\">Add contact</Button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/slice';\n\nexport const Contact = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li>\n      <p>\n        {name}: {number}\n      </p>\n      <button onClick={() => dispatch(deleteContact(id))}>Delete</button>\n    </li>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { updateFilter } from 'redux/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <input\n        type=\"text\"\n        onChange={evt => dispatch(updateFilter(evt.target.value))}\n      />\n    </>\n  );\n};\n","import { Contact } from 'components/Contact/Contact';\nimport { Filter } from 'components/Filter/Filter';\nimport { useSelector } from 'react-redux';\n\nexport const ContactList = () => {\n  const contacts = useSelector(state => state.contacts);\n  const filter = useSelector(state => state.filter);\n\n  const filteredContacts = contacts.filter(item => {\n    return item.name.toLowerCase().includes(filter.toLowerCase());\n  });\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <Filter />\n      <ul>\n        {filteredContacts.map(item => (\n          <Contact\n            key={item.id}\n            id={item.id}\n            name={item.name}\n            number={item.number}\n          />\n        ))}\n      </ul>\n    </>\n  );\n};\n","import { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nexport default function Contacts() {\n  return (\n    <div>\n      <ContactForm />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["Form","styled","FormikForm","_templateObject","_taggedTemplateLiteral","Field","FormikField","_templateObject2","ErrorMessage","Error","_templateObject3","Button","_templateObject4","contactsFormSchema","Yup","shape","name","min","max","required","number","matches","ContactForm","dispatch","useDispatch","contacts","useSelector","state","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","some","contact","toLowerCase","alert","concat","addContact","id","nanoid","resetForm","children","_jsxs","htmlFor","component","type","Contact","_ref","onClick","deleteContact","Filter","_Fragment","onChange","evt","updateFilter","target","value","ContactList","filter","filteredContacts","item","includes","map","Contacts"],"sourceRoot":""}